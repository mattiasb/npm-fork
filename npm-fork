#!/bin/bash

VERSION="0.1"
GH_URL="git://github.com/"
GH_URL_LENGTH=${#GH_URL}
GH_SUFFIX=".git"
GH_SUFFIX_LENGTH=${#GH_SUFFIX}

# Min length of user/package == 3. Example: "x/y" 
GH_MIN_REPO_LENGTH=$(($GH_URL_LENGTH + 3 + $GH_SUFFIX_LENGTH))

function testHas(){
    local path=`which ${1} 2> /dev/null`
    if [ -z $path ]; then
	echo "Can't find \"${1}\" command." >&2
	echo "\tSee: ${2}." >&2
	exit 1
    fi
}

if [ -z $1 ] || [ "-h" = $1 ] || [ "--help" = $1 ]; then 
    echo "Usage: npm-fork PACKAGE"
    exit 1
elif [ "-v" = $1 ] || [ "--version" = $1 ]; then
    echo "npm-fork version ${VERSION}"
else
    PACKAGE=$1
    testHas "npm" "https://github.com/isaacs/npm"
    testHas "github" "https://github.com/defunkt/github-gem"
    REPO=`npm view "${PACKAGE}" repository.url 2> /dev/null | grep github`
    if [ -z $REPO ]; then 
	echo "No github repository for ${PACKAGE} found (or package doesn't exist)."
	exit 1
    elif [ ${#REPO} -lt $GH_MIN_REPO_LENGTH ] || 
	 [ "${REPO:0:$GH_URL_LENGTH}" != "${GH_URL}" ] || 
         [ "${REPO: -4}"  != "${GH_SUFFIX}" ]; then
	echo "Unexpected repository format. " >&2
	echo "\tExpected: ${GH_URL}{USER}/{PACKAGE}${GH_SUFFIX}" >&2
	echo "\tGot: ${REPO}" >&2
	exit 1
    fi
    GH_PATH=${REPO:$GH_URL_LENGTH:-4}
    echo "Forking and cloning [${GH_PATH}] on GitHub..."
    github fork "${GH_PATH}"
fi

